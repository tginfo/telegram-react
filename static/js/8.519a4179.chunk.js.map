{"version":3,"sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["AnimationPreview","state","emoji","prevPropsSticker","loadStickerEmojis","sticker","id","TdLibController","send","then","result","props","setState","emojis","join","prevProps","prevState","snapshot","this","animation","className","Animation","React","Component","StickerSet","nextProps","nextState","nextContext","info","theme","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","data-sticker-id","onClick","style","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","Animator","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","every","to","last","time","Math","min","p","val","outSine","forEach","from","func","stop","cancelAnimationFrame","n","sin","PI","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","scrollToPosition","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","abs","sign","setTimeout","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","off","play","PICKER_HEADER","openMedia","ref","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","recent","stickerSets","sets","a","is_attached","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","GifsPicker","begin","cancel","prevScrollTop","savedAnimations","AnimationStore","inViewMap","inViewIndexes","animations","index","animationsInView","compareMaps","loadAnimationThumbnailContent","loadAnimationContent","picker","margin","borderRadius","EmojiPickerButton","onClientUpdateChange","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","handleEmojiClick","tab","gifsPickerRef","handleStickersClick","stickersPicker","handleGifsClick","gifsPicker","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","rel","type","href","onMouseLeave","classNames","Button","withTheme"],"mappings":"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","file":"static/js/8.519a4179.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport Animation from '../Message/Media/Animation';\nimport { STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickerPreview.css';\n\nclass AnimationPreview extends React.Component {\n    state = {\n        emoji: null,\n        prevPropsSticker: null\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        const { sticker } = props;\n        const { prevPropsSticker } = state;\n\n        if (sticker && prevPropsSticker) {\n            return {\n                prevPropsSticker: sticker,\n                emoji: null\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { sticker } = this.props;\n\n        if (sticker && sticker !== prevProps.sticker) {\n            this.loadStickerEmojis(sticker);\n        }\n    }\n\n    componentDidMount() {\n        const { sticker } = this.props;\n\n        if (sticker) {\n            this.loadStickerEmojis(sticker);\n        }\n    }\n\n    loadStickerEmojis = sticker => {\n        const { sticker: file } = sticker;\n        const { id } = file;\n\n        TdLibController.send({\n            '@type': 'getStickerEmojis',\n            sticker: { '@type': 'inputFileId', id }\n        }).then(result => {\n            if (this.props.sticker === sticker) {\n                this.setState({\n                    emoji: result.emojis.join(' ')\n                });\n            }\n        });\n    };\n\n    render() {\n        const { animation } = this.props;\n\n        if (!animation) return null;\n\n        return (\n            <div className='sticker-preview'>\n                <Animation\n                    animation={animation}\n                />\n            </div>\n        );\n    }\n}\n\nAnimationPreview.propTypes = {\n    animation: PropTypes.object\n};\n\nexport default AnimationPreview;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}\n                style={{\n                    width: STICKER_SMALL_DISPLAY_SIZE,\n                    height: STICKER_SMALL_DISPLAY_SIZE\n                }}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className='sticker-set-title'>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: 'sticker-set-icon-root' }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default StickerSet;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (now - start > duration && options.every(x => x.to === x.last)) {\n            this.stopped = true;\n        }\n\n        if (stopped) return;\n\n        const time = Math.min(now - start, duration);\n        const p = duration === 0 ? 1.0 : time / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            x.last = from + (to - from) * val;\n            func(x.last);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n\n        this.state = { position: 0 };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 48 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 48;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                style={{ width: 36, height: 36 }}\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker-header'>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPickerHeader;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { compose } from '../../Utils/HOC';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[sp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        // console.log('[sp] handleScroll');\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker'>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport Animation from '../Message/Media/Animation';\nimport { loadAnimationContent, loadAnimationThumbnailContent, loadStickerSetContent } from '../../Utils/File';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GifsPicker.css'\nimport * as ReactDOM from 'react-dom';\nimport { compareMaps, debounce, throttle } from '../../Utils/Common';\n\nclass GifsPicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.itemsMap = new Map();\n\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\n    }\n\n    start() {\n        this.loadInViewContent();\n    }\n\n    stop() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: new Map()\n        })\n    }\n\n    handleScroll = event => {\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\n\n        this.loadInViewContentOnScrollEnd();\n\n        const begin = scrollTop <= 10;\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\n\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\n        this.prevScrollTop = scrollTop;\n        if (cancel) {\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\n            return;\n        }\n\n        this.loadInViewContent();\n    };\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    async loadContent() {\n        // console.log('[gp] loadContent');\n\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x, null);\n            loadAnimationContent(store, x, null, false);\n        });\n    }\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[gp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { savedAnimations } = AnimationStore;\n\n        const inViewMap = new Map();\n        const inViewIndexes = [];\n        savedAnimations.animations.forEach((x, index) => {\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                }\n            }\n        });\n\n        const { animationsInView } = AnimationStore;\n        if (compareMaps(animationsInView, inViewMap)) {\n            // console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\n            return;\n        }\n\n\n        // console.log('[gp] inViewItems', inViewIndexes);\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: inViewMap\n        })\n\n        // inViewItems.forEach(x => {\n        //     const store = FileStore.getStore();\n        //     if (!this.loadedSets.has(x.id)) {\n        //         this.loadedSets.set(x.id, x.id);\n        //         loadStickerSetContent(store, x);\n        //     }\n        // });\n    };\n\n    render() {\n        const { t, onSelect } = this.props;\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return null;\n\n        this.itemsMap.clear();\n        const items = savedAnimations.animations.map((x, index) => (\n            // <div\n            //     key={`${index}_${x.animation.id}`}\n            //     ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\n            //     >\n                <Animation\n                    key={`${index}_${x.animation.id}`}\n                    ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\n                    animation={x}\n                    openMedia={() => onSelect(x)}\n                    picker={true}\n                    style={{ width: 105, height: 105, margin: 2, borderRadius: 0 }}\n                />\n            // </div>\n        ));\n\n        return (\n            <div className='gifs-picker'>\n                <div ref={this.scrollRef} className='gifs-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nGifsPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(GifsPicker);","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport AnimationPreview from './AnimationPreview';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport GifsPicker from './GifsPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n        this.gifsPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n            this.loadSavedAnimations();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadSavedAnimations = async () => {\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x);\n        });\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n\n        const gifsPicker = this.gifsPickerRef.current;\n        gifsPicker.stop();\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        setTimeout(() => {\n            // console.log('[sp] handleStickersClick.loadContent');\n            stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n        }, 150);\n\n        // console.log('[sp] handleStickersClick');\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n\n        const gifsPicker = this.gifsPickerRef.current;\n        gifsPicker.stop();\n    };\n\n    handleGifsClick = () => {\n        const gifsPicker = this.gifsPickerRef.current;\n        const { tab } = this.state;\n        if (tab === 2) {\n            gifsPicker.scrollTop();\n        } else {\n            const { savedAnimations } = AnimationStore;\n\n            setTimeout(() => {\n                gifsPicker.loadContent(savedAnimations);\n                gifsPicker.start();\n            }, 150);\n\n            this.setState({ tab: 2 });\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    handleGifSend = animation => {\n        if (!animation) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationSend',\n            animation\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleGifPreview = animation => {\n        this.setState({ animation });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationPreview',\n            animation\n        });\n\n        if (!animation) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, animation, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n\n            this.gifsPicker = (\n                <GifsPicker\n                    ref={this.gifsPickerRef}\n                    onSelect={this.handleGifSend}\n                    onPreview={this.handleGifPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                        {this.gifsPicker}\n                    </div>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('AccDescrStickers')}\n                        </Button>\n                        <Button\n                            color={tab === 2 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleGifsClick}>\n                            {t('AttachGif')}\n                        </Button>\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                    {Boolean(animation) && <AnimationPreview animation={animation} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}