{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","nextProps","nextState","nextContext","this","props","info","theme","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","className","key","sticker","id","data-sticker-id","onClick","style","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","React","Component","Animator","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","every","to","last","time","Math","min","p","val","outSine","forEach","from","func","stop","cancelAnimationFrame","n","sin","PI","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","abs","sign","setTimeout","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","off","prevProps","prevState","snapshot","play","PICKER_HEADER","openMedia","ref","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","recent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","EmojiPickerButton","onClientUpdateChange","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","handleEmojiClick","tab","handleStickersClick","stickersPicker","handleStickerSend","handleStickerPreview","emojiPickerRef","ApplicationStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","rel","type","href","onMouseLeave","classNames","Button","StickerPreview","withTheme"],"mappings":"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","file":"static/js/8.4248bd0b.chunk.js","sourcesContent":["/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\r\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\r\nimport './StickerSet.css';\r\n\r\nclass StickerSet extends React.Component {\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const { info, theme } = this.props;\r\n\r\n        if (theme !== nextProps.theme) {\r\n            return true;\r\n        }\r\n\r\n        if (info !== nextProps.info) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\r\n        if (!info) return null;\r\n\r\n        const { title, stickers } = info;\r\n\r\n        const items = stickers.map((x, i) => (\r\n            <div\r\n                className='sticker-set-item'\r\n                key={x.sticker.id}\r\n                data-sticker-id={x.sticker.id}\r\n                onClick={() => onSelect(x)}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseDown={onMouseDown}\r\n                style={{\r\n                    width: STICKER_SMALL_DISPLAY_SIZE,\r\n                    height: STICKER_SMALL_DISPLAY_SIZE\r\n                }}>\r\n                <Sticker\r\n                    key={x.sticker.id}\r\n                    sticker={x}\r\n                    autoplay={false}\r\n                    blur={false}\r\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\r\n                    preview\r\n                    source={StickerSourceEnum.PICKER}\r\n                />\r\n            </div>\r\n        ));\r\n\r\n        return (\r\n            <div className='sticker-set'>\r\n                <div className='sticker-set-title'>\r\n                    <div className='sticker-set-title-wrapper'>\r\n                        <span>{title}</span>\r\n                    </div>\r\n                    {onDeleteClick && (\r\n                        <IconButton\r\n                            aria-label='delete'\r\n                            classes={{ root: 'sticker-set-icon-root' }}\r\n                            size='small'\r\n                            onClick={onDeleteClick}>\r\n                            <ClearIcon fontSize='inherit' />\r\n                        </IconButton>\r\n                    )}\r\n                </div>\r\n                <div className='sticker-set-content'>{items}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickerSet.propTypes = {\r\n    info: PropTypes.object.isRequired,\r\n    onSelect: PropTypes.func.isRequired,\r\n    onMouseDown: PropTypes.func.isRequired,\r\n    onDeleteClick: PropTypes.func\r\n};\r\n\r\nexport default StickerSet;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nclass Animator {\r\n    constructor(duration, options = []) {\r\n        this.options = options;\r\n        this.duration = duration;\r\n    }\r\n\r\n    static outSine(n) {\r\n        return Math.sin((n * Math.PI) / 2);\r\n    }\r\n\r\n    start = () => {\r\n        this.stopped = false;\r\n        this.id = requestAnimationFrame(this.startAnim);\r\n    };\r\n\r\n    startAnim = timeStamp => {\r\n        const { start, duration } = this;\r\n\r\n        this.start = timeStamp;\r\n        this.end = start + duration;\r\n        this.draw(timeStamp);\r\n    };\r\n\r\n    draw = now => {\r\n        const { stopped, duration, start, options } = this;\r\n\r\n        if (now - start > duration && options.every(x => x.to === x.last)) {\r\n            this.stopped = true;\r\n        }\r\n\r\n        if (stopped) return;\r\n\r\n        const time = Math.min(now - start, duration);\r\n        const p = duration === 0 ? 1.0 : time / duration;\r\n        const val = Animator.outSine(p);\r\n\r\n        options.forEach(x => {\r\n            const { from, to, func } = x;\r\n            x.last = from + (to - from) * val;\r\n            func(x.last);\r\n        });\r\n\r\n        this.id = requestAnimationFrame(this.draw);\r\n    };\r\n\r\n    stop = () => {\r\n        this.stopped = true;\r\n        cancelAnimationFrame(this.id);\r\n    };\r\n}\r\n\r\nexport default Animator;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport Animator from '../../Utils/Animatior';\r\nimport Sticker from './../Message/Media/Sticker';\r\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\r\nimport StickerStore from '../../Stores/StickerStore';\r\nimport './StickersPickerHeader.css';\r\n\r\nclass StickersPickerHeader extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n        this.anchorRef = React.createRef();\r\n\r\n        this.state = { position: 0 };\r\n    }\r\n\r\n    componentDidMount() {\r\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\r\n    }\r\n\r\n    onClientUpdateStickerSetPosition = update => {\r\n        const { position } = update;\r\n\r\n        this.setState({ position });\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevState.position !== this.state.position) {\r\n            this.scrollToPosition();\r\n        }\r\n    }\r\n\r\n    scrollToPosition = () => {\r\n        const { position } = this.state;\r\n        const { animator, anchorRef, scrollRef } = this;\r\n\r\n        const scroll = scrollRef.current;\r\n        const anchor = anchorRef.current;\r\n        const anchorNode = ReactDOM.findDOMNode(anchor);\r\n\r\n        const scrollFrom = scroll.scrollLeft;\r\n        const scrollTo = position * 44 - 147;\r\n\r\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\r\n        const anchorTo = position * 44;\r\n\r\n        if (animator) {\r\n            animator.stop();\r\n        }\r\n\r\n        this.animator = new Animator(0, [\r\n            {\r\n                from: scrollFrom,\r\n                to: scrollTo,\r\n                func: left => (scroll.scrollLeft = left)\r\n            },\r\n            {\r\n                from:\r\n                    Math.abs(anchorTo - anchorFrom) > 338\r\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\r\n                        : anchorFrom,\r\n                to: anchorTo,\r\n                func: left => (anchorNode.style.left = left + 'px')\r\n            }\r\n        ]);\r\n\r\n        setTimeout(() => {\r\n            if (!this.animator) return;\r\n\r\n            this.animator.start();\r\n        }, 0);\r\n        // this.animator.start();\r\n    };\r\n\r\n    handleWheel = event => {\r\n        const { scrollRef } = this;\r\n\r\n        if (event.deltaX === 0) {\r\n            const scroll = scrollRef.current;\r\n\r\n            scroll.scrollLeft += event.deltaY;\r\n        }\r\n    };\r\n\r\n    handleSelect = sticker => {\r\n        const { stickers, onSelect } = this.props;\r\n\r\n        onSelect(stickers.indexOf(sticker));\r\n    };\r\n\r\n    render() {\r\n        const { stickers } = this.props;\r\n\r\n        const items = stickers.map(x => (\r\n            <Sticker\r\n                key={x.sticker.id}\r\n                className='stickers-picker-header-sticker'\r\n                style={{ width: 32, height: 32 }}\r\n                sticker={x}\r\n                play={false}\r\n                autoplay={false}\r\n                blur={false}\r\n                displaySize={32}\r\n                preview\r\n                source={StickerSourceEnum.PICKER_HEADER}\r\n                openMedia={() => this.handleSelect(x)}\r\n            />\r\n        ));\r\n\r\n        return (\r\n            <div className='stickers-picker-header'>\r\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\r\n                    <div className='stickers-picker-header-items'>{items}</div>\r\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickersPickerHeader.propTypes = {\r\n    stickers: PropTypes.array.isRequired,\r\n    onSelect: PropTypes.func.isRequired\r\n};\r\n\r\nexport default StickersPickerHeader;\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from '../../Utils/HOC';\r\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\r\nimport { withTranslation } from 'react-i18next';\r\nimport StickerSet from './StickerSet';\r\nimport StickersPickerHeader from './StickersPickerHeader';\r\nimport { debounce, throttle } from '../../Utils/Common';\r\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\r\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport StickerStore from '../../Stores/StickerStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './StickersPicker.css';\r\n\r\nclass StickersPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.scrollRef = React.createRef();\r\n        this.itemsMap = new Map();\r\n        this.loadedSets = new Map();\r\n\r\n        this.state = {\r\n            recent: null,\r\n            stickerSets: null,\r\n            sets: [],\r\n            headerStickers: [],\r\n            position: 0\r\n        };\r\n\r\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\r\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\r\n        this.updatePosition = throttle(this.updatePosition, 250);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\r\n\r\n        if (nextState.recent !== recent) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.stickerSets !== stickerSets) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.sets !== sets) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.showPreview !== showPreview) {\r\n            return true;\r\n        }\r\n\r\n        if (nextState.position !== position) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\r\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\r\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\r\n    }\r\n\r\n    onUpdateInstalledStickerSets = update => {\r\n        const { is_masks, sticker_set_ids } = update;\r\n        if (!is_masks) return;\r\n\r\n        this.filterSets();\r\n    };\r\n\r\n    onUpdateRecentStickers = update => {\r\n        this.reloadRecentContent();\r\n    };\r\n\r\n    filterSets(sticker_set_ids) {\r\n        const { sets, stickerSets } = this.state;\r\n    }\r\n\r\n    async reloadRecentContent() {\r\n        const recent = await TdLibController.send({\r\n            '@type': 'getRecentStickers',\r\n            is_attached: false\r\n        });\r\n\r\n        this.setState({\r\n            recent\r\n        });\r\n    }\r\n\r\n    scrollTop = () => {\r\n        this.scrollRef.current.scrollTop = 0;\r\n    };\r\n\r\n    loadContent = async (recent, stickerSets, sets) => {\r\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\r\n\r\n        if (!recent) {\r\n            recent = await TdLibController.send({\r\n                '@type': 'getRecentStickers',\r\n                is_attached: false\r\n            });\r\n        }\r\n\r\n        if (!sets) {\r\n            const result = await TdLibController.send({\r\n                '@type': 'getInstalledStickerSets',\r\n                is_masks: false\r\n            });\r\n\r\n            const promises = [];\r\n            result.sets.forEach(x => {\r\n                promises.push(\r\n                    TdLibController.send({\r\n                        '@type': 'getStickerSet',\r\n                        set_id: x.id\r\n                    })\r\n                );\r\n            });\r\n\r\n            sets = await Promise.all(promises);\r\n        }\r\n\r\n        const slicedSets = sets.slice(0, 5);\r\n        const headerStickers = sets.reduce((preview, set) => {\r\n            if (set.stickers.length > 0) {\r\n                preview.push(set.stickers[0]);\r\n            }\r\n            return preview;\r\n        }, []);\r\n\r\n        this.setState({\r\n            recent,\r\n            stickerSets,\r\n            sets: slicedSets,\r\n            fullSets: sets,\r\n            headerStickers\r\n        });\r\n        this.setsLength = slicedSets.length;\r\n    };\r\n\r\n    loadInViewContentOnScroll = () => {\r\n        this.loadInViewContent();\r\n    };\r\n\r\n    loadInViewContentOnScrollEnd = () => {\r\n        this.loadInViewContent(400);\r\n    };\r\n\r\n    loadInViewContent = (padding = 0) => {\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { sets } = this.state;\r\n\r\n        const inViewItems = [];\r\n        sets.forEach(x => {\r\n            const item = this.itemsMap.get(x.id);\r\n            const node = ReactDOM.findDOMNode(item);\r\n            if (node) {\r\n                const topBorder = scroll.scrollTop - padding;\r\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\r\n\r\n                const nodeTop = node.offsetTop;\r\n                const nodeBottom = node.offsetTop + node.clientHeight;\r\n\r\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\r\n                    inViewItems.push(x);\r\n                }\r\n            }\r\n        });\r\n\r\n        inViewItems.forEach(x => {\r\n            const store = FileStore.getStore();\r\n            if (!this.loadedSets.has(x.id)) {\r\n                this.loadedSets.set(x.id, x.id);\r\n                loadStickerSetContent(store, x);\r\n            }\r\n        });\r\n    };\r\n\r\n    updatePosition = () => {\r\n        const scroll = this.scrollRef.current;\r\n\r\n        const { sets } = this.state;\r\n        let minDiff = scroll.scrollHeight;\r\n        let position = 0;\r\n        let firstOffsetTop = 0;\r\n        sets.forEach((x, pos) => {\r\n            const element = this.itemsMap.get(x.id);\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node) {\r\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\r\n\r\n                    const offsetTop = node.offsetTop - firstOffsetTop;\r\n                    if (node && offsetTop <= scroll.scrollTop) {\r\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\r\n                        if (diff <= minDiff) {\r\n                            minDiff = diff;\r\n                            position = pos;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerSetPosition',\r\n            position\r\n        });\r\n    };\r\n\r\n    handleScroll = async () => {\r\n        //this.loadInViewContentOnScroll();\r\n        this.loadInViewContentOnScrollEnd();\r\n        this.updatePosition();\r\n\r\n        const scroll = this.scrollRef.current;\r\n\r\n        if (this.loadingChunk) return;\r\n\r\n        let loadChunk = false;\r\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\r\n            loadChunk = true;\r\n        }\r\n\r\n        if (!loadChunk) {\r\n            return false;\r\n        }\r\n\r\n        const { sets, stickerSets } = this.state;\r\n        if (stickerSets.sets.length === sets.length) return;\r\n\r\n        this.loadingChunk = true;\r\n        const promises = [];\r\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\r\n            promises.push(\r\n                TdLibController.send({\r\n                    '@type': 'getStickerSet',\r\n                    set_id: x.id\r\n                })\r\n            );\r\n        });\r\n\r\n        const result = await Promise.all(promises).finally(() => {\r\n            this.loadingChunk = false;\r\n        });\r\n\r\n        this.setsLength += result.length;\r\n        this.setState({ sets: sets.concat(result) });\r\n    };\r\n\r\n    loadPreviewContent = stickerId => {\r\n        const { recent, sets } = this.state;\r\n\r\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n        if (!sticker) return;\r\n\r\n        const store = FileStore.getStore();\r\n        loadStickerContent(store, sticker, null);\r\n\r\n        const stickersPerRow = 5;\r\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\r\n        preloadStickers.forEach(x => {\r\n            loadStickerContent(store, x, null);\r\n        });\r\n    };\r\n\r\n    handleMouseEnter = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\r\n        if (!stickerId) return;\r\n\r\n        if (!this.mouseDown) return;\r\n\r\n        if (this.mouseDownStickerId !== stickerId) {\r\n            this.mouseDownStickerId = null;\r\n        }\r\n        this.setState({ previewStickerId: stickerId });\r\n        this.loadPreviewContent(stickerId);\r\n\r\n        const { onPreview } = this.props;\r\n        const { recent, sets } = this.state;\r\n\r\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n        onPreview(sticker);\r\n    };\r\n\r\n    handleMouseDown = event => {\r\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\r\n        if (!stickerId) return;\r\n\r\n        this.mouseDownStickerId = stickerId;\r\n        const now = Date.now();\r\n\r\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\r\n        setTimeout(() => {\r\n            const { timestamp } = this.state;\r\n            if (timestamp === now) {\r\n                this.setState({ showPreview: true, cancelSend: true }, () => {\r\n                    const { onPreview } = this.props;\r\n                    const { recent, sets } = this.state;\r\n\r\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\r\n                    onPreview(sticker);\r\n                });\r\n            }\r\n        }, 500);\r\n\r\n        this.loadPreviewContent(stickerId);\r\n\r\n        this.mouseDown = true;\r\n        document.addEventListener('mouseup', this.handleMouseUp);\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n    };\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\r\n\r\n        const { onPreview } = this.props;\r\n\r\n        onPreview(null);\r\n\r\n        this.mouseDown = false;\r\n        document.removeEventListener('mouseup', this.handleMouseUp);\r\n    };\r\n\r\n    handleStickerSelect = sticker => {\r\n        const { onSelect } = this.props;\r\n        const { cancelSend } = this.state;\r\n\r\n        if (cancelSend) return;\r\n\r\n        onSelect(sticker);\r\n    };\r\n\r\n    handleSelectSet = async position => {\r\n        const { sets, stickerSets } = this.state;\r\n        const { scrollRef } = this;\r\n\r\n        if (position < sets.length) {\r\n            const element = this.itemsMap.get(sets[position].id);\r\n            if (element) {\r\n                const node = ReactDOM.findDOMNode(element);\r\n                if (node) {\r\n                    const scroll = scrollRef.current;\r\n                    scroll.scrollTop = node.offsetTop;\r\n                }\r\n            }\r\n        } else if (position < stickerSets.sets.length) {\r\n            if (this.loadingChunk) return;\r\n            if (stickerSets.sets.length === sets.length) return;\r\n\r\n            this.loadingChunk = true;\r\n            const promises = [];\r\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\r\n                promises.push(\r\n                    TdLibController.send({\r\n                        '@type': 'getStickerSet',\r\n                        set_id: x.id\r\n                    })\r\n                );\r\n            });\r\n\r\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\r\n\r\n            this.setsLength += result.length;\r\n            let concatSets = sets.concat(result);\r\n            this.setState({ sets: concatSets }, () => {\r\n                if (position < concatSets.length) {\r\n                    this.handleSelectSet(position);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    handleDeleteRecent = () => {\r\n        TdLibController.send({\r\n            '@type': 'clearRecentStickers',\r\n            is_attached: false\r\n        });\r\n    };\r\n\r\n    handleDeleteStickerSet = id => {\r\n        TdLibController.send({\r\n            '@type': 'changeStickerSet',\r\n            set_id: id,\r\n            is_installed: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { t } = this.props;\r\n        const { recent, stickerSets, sets, headerStickers } = this.state;\r\n        // console.log('[sp] render', recent, stickerSets, sets);\r\n        // if (!stickerSets) return null;\r\n        //\r\n        // if (!sets) return null;\r\n        // if (!sets.length) return null;\r\n\r\n        this.itemsMap.clear();\r\n        const items = sets.map(x => (\r\n            <StickerSet\r\n                key={x.id}\r\n                ref={el => this.itemsMap.set(x.id, el)}\r\n                info={x}\r\n                onSelect={this.handleStickerSelect}\r\n                onMouseDown={this.handleMouseDown}\r\n                onMouseEnter={this.handleMouseEnter}\r\n            />\r\n        ));\r\n\r\n        const recentInfo =\r\n            recent && recent.stickers.length > 0\r\n                ? {\r\n                      stickers: recent.stickers,\r\n                      title: t('RecentStickers')\r\n                  }\r\n                : null;\r\n\r\n        return (\r\n            <div className='stickers-picker'>\r\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\r\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\r\n                    {Boolean(recentInfo) && (\r\n                        <StickerSet\r\n                            info={recentInfo}\r\n                            onSelect={this.handleStickerSelect}\r\n                            onMouseDown={this.handleMouseDown}\r\n                            onMouseEnter={this.handleMouseEnter}\r\n                            onDeleteClick={this.handleDeleteRecent}\r\n                        />\r\n                    )}\r\n                    {items}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nStickersPicker.propTypes = {\r\n    onSelect: PropTypes.func.isRequired,\r\n    onPreview: PropTypes.func.isRequired\r\n};\r\n\r\nconst enhance = compose(\r\n    withSaveRef(),\r\n    withTranslation(),\r\n    withRestoreRef()\r\n);\r\n\r\nexport default enhance(StickersPicker);\r\n","/*\r\n *  Copyright (c) 2018-present, Evgeny Nadymov\r\n *\r\n * This source code is licensed under the GPL v.3.0 license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\nimport { compose } from '../../Utils/HOC';\r\nimport withTheme from '@material-ui/core/styles/withTheme';\r\nimport { withTranslation } from 'react-i18next';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\r\nimport { Picker as EmojiPicker } from 'emoji-mart';\r\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\r\n// import data from 'emoji-mart/data/messenger.json'\r\nimport StickerPreview from './StickerPreview';\r\nimport StickersPicker from './StickersPicker';\r\nimport { isAppleDevice } from '../../Utils/Common';\r\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\r\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\r\nimport ApplicationStore from '../../Stores/ApplicationStore';\r\nimport FileStore from '../../Stores/FileStore';\r\nimport LocalizationStore from '../../Stores/LocalizationStore';\r\nimport TdLibController from '../../Controllers/TdLibController';\r\nimport './EmojiPickerButton.css';\r\n\r\nclass EmojiPickerButton extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n            tab: 0\r\n        };\r\n\r\n        this.emojiPickerRef = React.createRef();\r\n        this.stickersPickerRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\r\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        ApplicationStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\r\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\r\n    }\r\n\r\n    onClientUpdateChange = update => {\r\n        this.picker = null;\r\n    };\r\n\r\n    handleButtonMouseEnter = event => {\r\n        this.buttonEnter = true;\r\n        setTimeout(() => {\r\n            if (!this.buttonEnter) return;\r\n\r\n            this.updatePicker(true);\r\n            this.loadStickerSets();\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    loadStickerSets = async () => {\r\n        if (this.sets) return;\r\n\r\n        this.recent = await TdLibController.send({\r\n            '@type': 'getRecentStickers',\r\n            is_attached: false\r\n        });\r\n\r\n        this.stickerSets = await TdLibController.send({\r\n            '@type': 'getInstalledStickerSets',\r\n            is_masks: false\r\n        });\r\n\r\n        const promises = [];\r\n        this.stickerSets.sets.forEach(x => {\r\n            promises.push(\r\n                TdLibController.send({\r\n                    '@type': 'getStickerSet',\r\n                    set_id: x.id\r\n                })\r\n            );\r\n        });\r\n\r\n        this.sets = await Promise.all(promises);\r\n\r\n        const node = this.stickersPickerRef.current;\r\n\r\n        const store = FileStore.getStore();\r\n        loadRecentStickersContent(store, this.recent);\r\n\r\n        const previewSets = this.sets.slice(0, 5).reverse();\r\n        previewSets.forEach(x => {\r\n            loadStickerSetContent(store, x);\r\n            node.loadedSets.set(x.id, x.id);\r\n        });\r\n\r\n        const previewStickers = this.sets.reduce((stickers, set) => {\r\n            if (set.stickers.length > 0) {\r\n                stickers.push(set.stickers[0]);\r\n            }\r\n            return stickers;\r\n        }, []);\r\n        previewStickers.forEach(x => {\r\n            loadStickerThumbnailContent(store, x);\r\n        });\r\n    };\r\n\r\n    handleButtonMouseLeave = () => {\r\n        this.buttonEnter = false;\r\n        setTimeout(() => {\r\n            this.tryClosePicker();\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    tryClosePicker = () => {\r\n        const { sticker } = this.state;\r\n        if (this.paperEnter || this.buttonEnter || sticker) return;\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handlePaperMouseEnter = () => {\r\n        this.paperEnter = true;\r\n    };\r\n\r\n    handlePaperMouseLeave = () => {\r\n        // return;\r\n\r\n        this.paperEnter = false;\r\n        setTimeout(() => {\r\n            this.tryClosePicker();\r\n        }, EMOJI_PICKER_TIMEOUT_MS);\r\n    };\r\n\r\n    updatePicker = open => {\r\n        this.setState({ open });\r\n    };\r\n\r\n    handleEmojiClick = () => {\r\n        this.setState({ tab: 0 });\r\n    };\r\n\r\n    handleStickersClick = () => {\r\n        const stickersPicker = this.stickersPickerRef.current;\r\n        const { tab } = this.state;\r\n\r\n        stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\r\n\r\n        this.setState({ tab: 1 });\r\n        if (tab === 1) {\r\n            stickersPicker.scrollTop();\r\n        }\r\n    };\r\n\r\n    handleStickerSend = sticker => {\r\n        if (!sticker) return;\r\n\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerSend',\r\n            sticker\r\n        });\r\n\r\n        this.updatePicker(false);\r\n    };\r\n\r\n    handleStickerPreview = sticker => {\r\n        this.setState({ sticker });\r\n        TdLibController.clientUpdate({\r\n            '@type': 'clientUpdateStickerPreview',\r\n            sticker\r\n        });\r\n\r\n        if (!sticker) {\r\n            this.tryClosePicker();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { theme, t } = this.props;\r\n        const { open, tab, sticker } = this.state;\r\n\r\n        if (open && !this.picker) {\r\n            const i18n = {\r\n                search: t('Search'),\r\n                notfound: t('NotEmojiFound'),\r\n                skintext: t('ChooseDefaultSkinTone'),\r\n                categories: {\r\n                    search: t('SearchResults'),\r\n                    recent: t('Recent'),\r\n                    people: t('SmileysPeople'),\r\n                    nature: t('AnimalsNature'),\r\n                    foods: t('FoodDrink'),\r\n                    activity: t('Activity'),\r\n                    places: t('TravelPlaces'),\r\n                    objects: t('Objects'),\r\n                    symbols: t('Symbols'),\r\n                    flags: t('Flags'),\r\n                    custom: t('Custom')\r\n                }\r\n            };\r\n\r\n            this.picker = (\r\n                <EmojiPicker\r\n                    ref={this.emojiPickerRef}\r\n                    // data={data}\r\n                    set='apple'\r\n                    showPreview={false}\r\n                    showSkinTones={false}\r\n                    onSelect={this.props.onSelect}\r\n                    color={theme.palette.primary.dark}\r\n                    i18n={i18n}\r\n                    native={isAppleDevice()}\r\n                    style={{ width: 338, overflowX: 'hidden' }}\r\n                />\r\n            );\r\n\r\n            this.stickersPicker = (\r\n                <StickersPicker\r\n                    ref={this.stickersPickerRef}\r\n                    onSelect={this.handleStickerSend}\r\n                    onPreview={this.handleStickerPreview}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <link\r\n                    rel='stylesheet'\r\n                    type='text/css'\r\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\r\n                />\r\n                <IconButton\r\n                    className='inputbox-icon-button'\r\n                    aria-label='Emoticon'\r\n                    onMouseEnter={this.handleButtonMouseEnter}\r\n                    onMouseLeave={this.handleButtonMouseLeave}>\r\n                    <InsertEmoticonIcon />\r\n                </IconButton>\r\n                <div\r\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\r\n                    onMouseEnter={this.handlePaperMouseEnter}\r\n                    onMouseLeave={this.handlePaperMouseLeave}>\r\n                    <div className='emoji-picker-header'>\r\n                        <Button\r\n                            color={tab === 0 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleEmojiClick}>\r\n                            {t('Emoji')}\r\n                        </Button>\r\n                        <Button\r\n                            color={tab === 1 ? 'primary' : 'default'}\r\n                            className='emoji-picker-header-button'\r\n                            onClick={this.handleStickersClick}>\r\n                            {t('Stickers')}\r\n                        </Button>\r\n                    </div>\r\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\r\n                        {this.picker}\r\n                        {this.stickersPicker}\r\n                    </div>\r\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst enhance = compose(\r\n    withTranslation(),\r\n    withTheme\r\n);\r\n\r\nexport default enhance(EmojiPickerButton);\r\n"],"sourceRoot":""}