{"version":3,"sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["AnimationPreview","animation","this","props","className","Animation","stretch","style","borderRadius","React","Component","StickerSet","nextProps","nextState","nextContext","info","theme","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","sticker","id","data-sticker-id","onClick","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","stop","Animator","from","to","func","Math","abs","sign","setTimeout","start","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","off","prevProps","prevState","snapshot","play","PICKER_HEADER","openMedia","ref","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","recent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","forEach","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","now","Date","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","GifsPicker","begin","end","cancel","prevScrollTop","savedAnimations","AnimationStore","animations","inViewMap","inViewIndexes","index","animationsInView","compareMaps","animationIndex","openAnimation","forceUpdate","loadAnimationThumbnailContent","loadAnimationContent","data-animation-index","type","margin","EmojiPickerButton","onClientUpdateChange","open","removePicker","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","tab","gifsPicker","gifsPickerRef","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","handleEmojiClick","stickersPicker","handleStickersClick","handleGifsClick","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","top","rel","href","onMouseLeave","classNames","Button","withTheme"],"mappings":"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","file":"static/js/8.8c94eeb5.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animation from '../Message/Media/Animation';\nimport './StickerPreview.css';\n\nclass AnimationPreview extends React.Component {\n    render() {\n        const { animation } = this.props;\n        if (!animation) return null;\n\n        return (\n            <div className='sticker-preview'>\n                <Animation\n                    stretch={true}\n                    animation={animation}\n                    style={{ borderRadius: 0 }}\n                />\n            </div>\n        );\n    }\n}\n\nAnimationPreview.propTypes = {\n    animation: PropTypes.object\n};\n\nexport default AnimationPreview;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}\n                style={{\n                    width: STICKER_SMALL_DISPLAY_SIZE,\n                    height: STICKER_SMALL_DISPLAY_SIZE\n                }}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className='sticker-set-title'>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: 'sticker-set-icon-root' }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default StickerSet;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n\n        this.state = { position: 0 };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 48 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 48;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                style={{ width: 36, height: 36 }}\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker-header'>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPickerHeader;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { compose } from '../../Utils/HOC';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    stop() {\n\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[sp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        // console.log('[sp] handleScroll');\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker' style={style}>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { withTranslation } from 'react-i18next';\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport Animation from '../Message/Media/Animation';\nimport { loadAnimationContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { compareMaps, debounce, throttle } from '../../Utils/Common';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GifsPicker.css'\n\nclass GifsPicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.itemsMap = new Map();\n\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\n    }\n\n    start() {\n        this.loadInViewContent();\n    }\n\n    stop() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: new Map()\n        })\n    }\n\n    handleScroll = event => {\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\n\n        this.loadInViewContentOnScrollEnd();\n\n        const begin = scrollTop <= 10;\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\n\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\n        this.prevScrollTop = scrollTop;\n        if (cancel) {\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\n            return;\n        }\n\n        this.loadInViewContent();\n    };\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    async loadContent() {\n        // console.log('[gp] loadContent');\n\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n\n            this.forceUpdate(() => {\n                this.start();\n            });\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x, null);\n            loadAnimationContent(store, x, null, false);\n        });\n    }\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[gp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return;\n\n        const { animations } = savedAnimations;\n\n        const inViewMap = new Map();\n        const inViewIndexes = [];\n        animations.forEach((x, index) => {\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                }\n            }\n        });\n\n        const { animationsInView } = AnimationStore;\n        if (compareMaps(animationsInView, inViewMap)) {\n            // console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\n            return;\n        }\n\n\n        // console.log('[gp] inViewItems', inViewIndexes);\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: inViewMap\n        })\n\n        // inViewItems.forEach(x => {\n        //     const store = FileStore.getStore();\n        //     if (!this.loadedSets.has(x.id)) {\n        //         this.loadedSets.set(x.id, x.id);\n        //         loadStickerSetContent(store, x);\n        //     }\n        // });\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const { savedAnimations } = AnimationStore;\n\n                    const sticker = savedAnimations.animations[stickerId];\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        // this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        // this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { savedAnimations } = AnimationStore;\n\n        const sticker = savedAnimations.animations[stickerId];\n        onPreview(sticker);\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    openAnimation = animation => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(animation);\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return null;\n\n        this.itemsMap.clear();\n        const items = savedAnimations.animations.map((x, index) => (\n            <div\n                data-animation-index={index}\n                key={`${index}_${x.animation.id}`}\n                ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n                >\n                <Animation\n                    type='picker'\n                    animation={x}\n                    openMedia={() => this.openAnimation(x)}\n                    style={{ width: 104, height: 104, margin: 2, borderRadius: 0 }}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='gifs-picker' style={style}>\n                <div ref={this.scrollRef} className='gifs-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nGifsPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(GifsPicker);","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport AnimationPreview from './AnimationPreview';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport GifsPicker from './GifsPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n        this.gifsPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        const { open } = this.state;\n\n        if (open) {\n            this.removePicker = true;\n        } else {\n            this.picker = null;\n        }\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n            this.loadSavedAnimations();\n\n            if (this.state.tab === 2) {\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.start();\n                }\n            }\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadSavedAnimations = async () => {\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x);\n        });\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { animation, sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker || animation) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open }, () => {\n            if (!this.state.open) {\n                if (this.removePicker) {\n                    this.picker = null;\n                    this.removePicker = false;\n                }\n\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.stop();\n                }\n            }\n        });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        // console.log('[sp] handleStickersClick');\n\n        if (tab === 1) {\n            if (stickersPicker) {\n                stickersPicker.scrollTop();\n            }\n        } else {\n            setTimeout(() => {\n                // console.log('[sp] handleStickersClick.loadContent');\n                stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n            }, 150);\n\n            this.setState({ tab: 1 });\n        }\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n    };\n\n    handleGifsClick = () => {\n        const gifsPicker = this.gifsPickerRef.current;\n        const { tab } = this.state;\n\n        if (tab === 2) {\n            if (gifsPicker) {\n                gifsPicker.scrollTop();\n            }\n        } else {\n            const { savedAnimations } = AnimationStore;\n\n            setTimeout(() => {\n                gifsPicker.loadContent(savedAnimations);\n                gifsPicker.start();\n            }, 150);\n\n            this.setState({ tab: 2 });\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    handleGifSend = animation => {\n        if (!animation) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationSend',\n            animation\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleGifPreview = animation => {\n        this.setState({ animation });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationPreview',\n            animation\n        });\n\n        if (!animation) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, animation, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 0, top: 0 }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                    style={{ position: 'absolute', left: 338, top: 0 }}\n                />\n            );\n\n            this.gifsPicker = (\n                <GifsPicker\n                    ref={this.gifsPickerRef}\n                    onSelect={this.handleGifSend}\n                    onPreview={this.handleGifPreview}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 676, top: 0 }}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                        {this.gifsPicker}\n                    </div>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('AccDescrStickers')}\n                        </Button>\n                        <Button\n                            color={tab === 2 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleGifsClick}>\n                            {t('AttachGif')}\n                        </Button>\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                    {Boolean(animation) && <AnimationPreview animation={animation} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}