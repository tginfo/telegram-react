{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","React","Component","shouldComponentUpdate","nextProps","nextState","nextContext","this","props","info","theme","render","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","className","key","sticker","id","data-sticker-id","onClick","style","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","Animator","constructor","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","every","to","last","time","Math","min","p","val","outSine","forEach","from","func","stop","cancelAnimationFrame","n","sin","PI","StickersPickerHeader","super","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","abs","sign","setTimeout","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","componentDidMount","StickerStore","on","componentWillUnmount","off","componentDidUpdate","prevProps","prevState","snapshot","play","PICKER_HEADER","openMedia","ref","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","recent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","EmojiPickerButton","onClientUpdateChange","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","handleEmojiClick","tab","handleStickersClick","stickersPicker","handleStickerSend","handleStickerPreview","emojiPickerRef","ApplicationStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","rel","type","href","onMouseLeave","classNames","Button","StickerPreview","withTheme"],"mappings":"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","file":"static/js/8.0a5fc83f.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}\n                style={{\n                    width: STICKER_SMALL_DISPLAY_SIZE,\n                    height: STICKER_SMALL_DISPLAY_SIZE\n                }}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className='sticker-set-title'>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: 'sticker-set-icon-root' }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default StickerSet;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (now - start > duration && options.every(x => x.to === x.last)) {\n            this.stopped = true;\n        }\n\n        if (stopped) return;\n\n        const time = Math.min(now - start, duration);\n        const p = duration === 0 ? 1.0 : time / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            x.last = from + (to - from) * val;\n            func(x.last);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n\n        this.state = { position: 0 };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 44 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 44;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                style={{ width: 32, height: 32 }}\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker-header'>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPickerHeader;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { compose } from '../../Utils/HOC';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker'>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}