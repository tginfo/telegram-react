{"version":3,"sources":["Components/ColumnMiddle/AnimationPreview.js","Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/GifsPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["AnimationPreview","state","emoji","prevPropsSticker","loadStickerEmojis","sticker","id","TdLibController","send","then","result","props","setState","emojis","join","prevProps","prevState","snapshot","this","animation","className","Animation","style","borderRadius","React","Component","StickerSet","nextProps","nextState","nextContext","info","theme","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","key","data-sticker-id","onClick","width","STICKER_SMALL_DISPLAY_SIZE","height","Sticker","autoplay","blur","displaySize","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","classes","root","size","fontSize","Animator","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","every","to","last","time","Math","min","p","val","outSine","forEach","from","func","stop","cancelAnimationFrame","n","sin","PI","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","scrollToPosition","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","left","replace","anchorTo","abs","sign","setTimeout","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","off","play","PICKER_HEADER","openMedia","ref","onWheel","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","recent","stickerSets","sets","a","is_attached","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","padding","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","GifsPicker","begin","cancel","prevScrollTop","console","log","savedAnimations","AnimationStore","animations","inViewMap","inViewIndexes","index","animationsInView","compareMaps","animationIndex","openAnimation","forceUpdate","loadAnimationThumbnailContent","loadAnimationContent","data-animation-index","picker","margin","EmojiPickerButton","onClientUpdateChange","open","removePicker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","loadSavedAnimations","tab","gifsPicker","gifsPickerRef","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","handleEmojiClick","stickersPicker","handleStickersClick","handleGifsClick","handleStickerSend","handleStickerPreview","handleGifSend","handleGifPreview","emojiPickerRef","AppStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","color","palette","primary","dark","native","isAppleDevice","overflowX","top","rel","type","href","onMouseLeave","classNames","Button","withTheme"],"mappings":"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","file":"static/js/8.24490f88.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport Animation from '../Message/Media/Animation';\nimport { STICKER_PREVIEW_DISPLAY_SIZE } from '../../Constants';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickerPreview.css';\n\nclass AnimationPreview extends React.Component {\n    state = {\n        emoji: null,\n        prevPropsSticker: null\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        const { sticker } = props;\n        const { prevPropsSticker } = state;\n\n        if (sticker && prevPropsSticker) {\n            return {\n                prevPropsSticker: sticker,\n                emoji: null\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const { sticker } = this.props;\n\n        if (sticker && sticker !== prevProps.sticker) {\n            this.loadStickerEmojis(sticker);\n        }\n    }\n\n    componentDidMount() {\n        const { sticker } = this.props;\n\n        if (sticker) {\n            this.loadStickerEmojis(sticker);\n        }\n    }\n\n    loadStickerEmojis = sticker => {\n        const { sticker: file } = sticker;\n        const { id } = file;\n\n        TdLibController.send({\n            '@type': 'getStickerEmojis',\n            sticker: { '@type': 'inputFileId', id }\n        }).then(result => {\n            if (this.props.sticker === sticker) {\n                this.setState({\n                    emoji: result.emojis.join(' ')\n                });\n            }\n        });\n    };\n\n    render() {\n        const { animation } = this.props;\n\n        if (!animation) return null;\n\n        return (\n            <div className='sticker-preview'>\n                <Animation\n                    animation={animation}\n                    style={{ borderRadius: 0 }}\n                />\n            </div>\n        );\n    }\n}\n\nAnimationPreview.propTypes = {\n    animation: PropTypes.object\n};\n\nexport default AnimationPreview;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className='sticker-set-item'\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}\n                style={{\n                    width: STICKER_SMALL_DISPLAY_SIZE,\n                    height: STICKER_SMALL_DISPLAY_SIZE\n                }}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className='sticker-set-title'>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: 'sticker-set-icon-root' }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default StickerSet;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (now - start > duration && options.every(x => x.to === x.last)) {\n            this.stopped = true;\n        }\n\n        if (stopped) return;\n\n        const time = Math.min(now - start, duration);\n        const p = duration === 0 ? 1.0 : time / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            x.last = from + (to - from) * val;\n            func(x.last);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n\n        this.state = { position: 0 };\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 48 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 48;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                style={{ width: 36, height: 36 }}\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker-header'>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div ref={this.anchorRef} className='stickers-picker-header-anchor' />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default StickersPickerHeader;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { compose } from '../../Utils/HOC';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    stop() {\n\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        // console.log('[sp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        // console.log('[sp] handleScroll');\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker' style={style}>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as ReactDOM from 'react-dom';\nimport { withTranslation } from 'react-i18next';\nimport { compose, withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport Animation from '../Message/Media/Animation';\nimport { loadAnimationContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { compareMaps, debounce, throttle } from '../../Utils/Common';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './GifsPicker.css'\n\nclass GifsPicker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n\n        this.itemsMap = new Map();\n\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 250);\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 250);\n    }\n\n    start() {\n        this.loadInViewContent();\n    }\n\n    stop() {\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: new Map()\n        })\n    }\n\n    handleScroll = event => {\n        const { scrollTop, scrollHeight, offsetHeight } = this.scrollRef.current;\n\n        this.loadInViewContentOnScrollEnd();\n\n        const begin = scrollTop <= 10;\n        const end = scrollHeight - (scrollTop + offsetHeight) <= 10;\n        const cancel = Math.abs(scrollTop - this.prevScrollTop) > 50 && !begin && !end; // too fast\n\n        // console.log('[gp] handleScroll', Math.abs(scrollTop - this.prevScrollTop), scrollTop, this.prevScrollTop, begin, end);\n        this.prevScrollTop = scrollTop;\n        if (cancel) {\n            // console.log('[gp] cancel handleScroll', scrollTop - this.prevScrollTop);\n            return;\n        }\n\n        this.loadInViewContent();\n    };\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    async loadContent() {\n        // console.log('[gp] loadContent');\n\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n\n            this.forceUpdate(() => {\n                this.start();\n            });\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x, null);\n            loadAnimationContent(store, x, null, false);\n        });\n    }\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContent = (padding = 0) => {\n        console.log('[gp] loadInViewContent');\n        const scroll = this.scrollRef.current;\n\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return;\n\n        const { animations } = savedAnimations;\n\n        const inViewMap = new Map();\n        const inViewIndexes = [];\n        animations.forEach((x, index) => {\n            const item = this.itemsMap.get(`${index}_${x.animation.id}`);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewMap.set(x, x);\n                    inViewIndexes.push(index);\n                }\n            }\n        });\n\n        const { animationsInView } = AnimationStore;\n        if (compareMaps(animationsInView, inViewMap)) {\n            console.log('[gp] inViewItems equals', inViewIndexes, animationsInView);\n            return;\n        }\n\n\n        console.log('[gp] inViewItems', inViewIndexes);\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationsInView',\n            animations: inViewMap\n        })\n\n        // inViewItems.forEach(x => {\n        //     const store = FileStore.getStore();\n        //     if (!this.loadedSets.has(x.id)) {\n        //         this.loadedSets.set(x.id, x.id);\n        //         loadStickerSetContent(store, x);\n        //     }\n        // });\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const { savedAnimations } = AnimationStore;\n\n                    const sticker = savedAnimations.animations[stickerId];\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        // this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.animationIndex);\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        // this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { savedAnimations } = AnimationStore;\n\n        const sticker = savedAnimations.animations[stickerId];\n        onPreview(sticker);\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    openAnimation = animation => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(animation);\n    };\n\n    render() {\n        const { t, style } = this.props;\n        const { savedAnimations } = AnimationStore;\n        if (!savedAnimations) return null;\n\n        this.itemsMap.clear();\n        const items = savedAnimations.animations.map((x, index) => (\n            <div\n                data-animation-index={index}\n                key={`${index}_${x.animation.id}`}\n                ref={el => this.itemsMap.set(`${index}_${x.animation.id}`, el)}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n                >\n                <Animation\n                    animation={x}\n                    openMedia={() => this.openAnimation(x)}\n                    picker={true}\n                    style={{ width: 104, height: 104, margin: 2, borderRadius: 0 }}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='gifs-picker' style={style}>\n                <div ref={this.scrollRef} className='gifs-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nGifsPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(GifsPicker);","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport AnimationPreview from './AnimationPreview';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport GifsPicker from './GifsPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent, loadAnimationThumbnailContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport AnimationStore from '../../Stores/AnimationStore';\nimport AppStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n        this.gifsPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        AppStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        AppStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        const { open } = this.state;\n\n        if (open) {\n            this.removePicker = true;\n        } else {\n            this.picker = null;\n        }\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n            this.loadSavedAnimations();\n\n            if (this.state.tab === 2) {\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.start();\n                }\n            }\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadSavedAnimations = async () => {\n        let { savedAnimations } = AnimationStore;\n        if (!savedAnimations) {\n            const result = await TdLibController.send({\n                '@type': 'getSavedAnimations'\n            });\n\n            AnimationStore.savedAnimations = result;\n            savedAnimations = result;\n        }\n\n        // load content\n        const store = FileStore.getStore();\n        const previewAnimations = savedAnimations.animations.slice(0, 1000);\n\n        // console.log('[sp] loadAnimationThumbnailContent', previewAnimations);\n        previewAnimations.forEach(x => {\n            loadAnimationThumbnailContent(store, x);\n        });\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { animation, sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker || animation) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open }, () => {\n            if (!this.state.open) {\n                if (this.removePicker) {\n                    this.picker = null;\n                    this.removePicker = false;\n                }\n\n                const gifsPicker = this.gifsPickerRef.current;\n                if (gifsPicker) {\n                    gifsPicker.stop();\n                }\n            }\n        });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        // console.log('[sp] handleStickersClick');\n\n        if (tab === 1) {\n            if (stickersPicker) {\n                stickersPicker.scrollTop();\n            }\n        } else {\n            setTimeout(() => {\n                // console.log('[sp] handleStickersClick.loadContent');\n                stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n            }, 150);\n\n            this.setState({ tab: 1 });\n        }\n\n        const gifsPicker = this.gifsPickerRef.current;\n        if (gifsPicker) {\n            gifsPicker.stop();\n        }\n    };\n\n    handleGifsClick = () => {\n        const gifsPicker = this.gifsPickerRef.current;\n        const { tab } = this.state;\n\n        if (tab === 2) {\n            if (gifsPicker) {\n                gifsPicker.scrollTop();\n            }\n        } else {\n            const { savedAnimations } = AnimationStore;\n\n            setTimeout(() => {\n                gifsPicker.loadContent(savedAnimations);\n                gifsPicker.start();\n            }, 150);\n\n            this.setState({ tab: 2 });\n        }\n\n        const stickersPicker = this.stickersPickerRef.current;\n        if (stickersPicker) {\n            stickersPicker.stop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    handleGifSend = animation => {\n        if (!animation) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationSend',\n            animation\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleGifPreview = animation => {\n        this.setState({ animation });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateAnimationPreview',\n            animation\n        });\n\n        if (!animation) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, animation, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 0, top: 0 }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                    style={{ position: 'absolute', left: 338, top: 0 }}\n                />\n            );\n\n            this.gifsPicker = (\n                <GifsPicker\n                    ref={this.gifsPickerRef}\n                    onSelect={this.handleGifSend}\n                    onPreview={this.handleGifPreview}\n                    style={{ width: 338, overflowX: 'hidden', position: 'absolute', left: 676, top: 0 }}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 }, { 'emoji-picker-content-gifs': tab === 2 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                        {this.gifsPicker}\n                    </div>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('AccDescrStickers')}\n                        </Button>\n                        <Button\n                            color={tab === 2 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleGifsClick}>\n                            {t('AttachGif')}\n                        </Button>\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                    {Boolean(animation) && <AnimationPreview animation={animation} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}